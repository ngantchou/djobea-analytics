#!/bin/bash

# üîÑ Script de Mise √† Jour Production - Djobea Analytics
# Usage: ./scripts/update.sh [version]

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

VERSION=${1:-"latest"}
BACKUP_DIR="backups/pre-update-$(date +%Y%m%d_%H%M%S)"

# Fonction de sauvegarde pr√©-mise √† jour
backup_before_update() {
    log_info "Cr√©ation de la sauvegarde pr√©-mise √† jour..."
    
    mkdir -p "$BACKUP_DIR"
    
    # Sauvegarde base de donn√©es
    docker-compose exec -T postgres pg_dump -U ${POSTGRES_USER:-djobea_user} ${POSTGRES_DB:-djobea} > "$BACKUP_DIR/database.sql"
    
    # Sauvegarde uploads
    tar -czf "$BACKUP_DIR/uploads.tar.gz" uploads/ 2>/dev/null || true
    
    # Sauvegarde configuration
    cp .env.production "$BACKUP_DIR/"
    cp docker-compose.yml "$BACKUP_DIR/"
    cp docker-compose.prod.yml "$BACKUP_DIR/" 2>/dev/null || true
    
    log_success "Sauvegarde cr√©√©e dans $BACKUP_DIR"
}

# Test de sant√© avant mise √† jour
health_check() {
    log_info "V√©rification de l'√©tat du syst√®me..."
    
    if ! curl -f http://localhost:3000/api/health &>/dev/null; then
        log_error "L'application n'est pas en √©tat de sant√©"
        exit 1
    fi
    
    log_success "Syst√®me en bonne sant√©"
}

# Mise √† jour du code
update_code() {
    log_info "Mise √† jour du code source..."
    
    # Sauvegarde des modifications locales
    git stash push -m "Pre-update stash $(date)"
    
    # R√©cup√©ration des derni√®res modifications
    git fetch origin
    
    if [ "$VERSION" = "latest" ]; then
        git checkout main
        git pull origin main
    else
        git checkout "tags/$VERSION"
    fi
    
    log_success "Code source mis √† jour vers $VERSION"
}

# Mise √† jour des d√©pendances
update_dependencies() {
    log_info "Mise √† jour des d√©pendances..."
    
    # Reconstruction des images Docker
    docker-compose -f docker-compose.yml -f docker-compose.prod.yml build --no-cache djobea-app
    
    log_success "D√©pendances mises √† jour"
}

# Migration de la base de donn√©es
migrate_database() {
    log_info "Ex√©cution des migrations de base de donn√©es..."
    
    # V√©rification s'il y a des migrations √† ex√©cuter
    if [ -d "migrations" ] && [ "$(ls -A migrations)" ]; then
        docker-compose exec djobea-app npm run migrate
        log_success "Migrations ex√©cut√©es"
    else
        log_info "Aucune migration √† ex√©cuter"
    fi
}

# D√©ploiement avec strat√©gie blue-green
blue_green_deploy() {
    log_info "D√©ploiement Blue-Green..."
    
    # D√©marrage de la nouvelle version (green)
    docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --scale djobea-app=2
    
    # Attente que la nouvelle instance soit pr√™te
    log_info "Attente de la nouvelle instance..."
    sleep 30
    
    # Test de sant√© de la nouvelle instance
    for i in {1..10}; do
        if curl -f http://localhost:3000/api/health &>/dev/null; then
            log_success "Nouvelle instance op√©rationnelle"
            break
        fi
        if [ $i -eq 10 ]; then
            log_error "La nouvelle instance ne r√©pond pas"
            rollback
            exit 1
        fi
        sleep 10
    done
    
    # Arr√™t de l'ancienne instance
    docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --scale djobea-app=1
    
    log_success "D√©ploiement Blue-Green termin√©"
}

# D√©ploiement standard
standard_deploy() {
    log_info "D√©ploiement standard..."
    
    # Arr√™t gracieux
    docker-compose -f docker-compose.yml -f docker-compose.prod.yml stop djobea-app
    
    # D√©marrage de la nouvelle version
    docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d djobea-app
    
    # Attente du d√©marrage
    log_info "Attente du d√©marrage..."
    sleep 30
    
    # V√©rification
    for i in {1..10}; do
        if curl -f http://localhost:3000/api/health &>/dev/null; then
            log_success "Application red√©marr√©e avec succ√®s"
            return 0
        fi
        log_info "Tentative $i/10..."
        sleep 10
    done
    
    log_error "L'application ne r√©pond pas apr√®s le red√©marrage"
    rollback
    exit 1
}

# Fonction de rollback
rollback() {
    log_warning "Rollback en cours..."
    
    # Restauration de la base de donn√©es
    if [ -f "$BACKUP_DIR/database.sql" ]; then
        docker-compose exec -T postgres psql -U ${POSTGRES_USER:-djobea_user} -d ${POSTGRES_DB:-djobea} < "$BACKUP_DIR/database.sql"
    fi
    
    # Restauration des uploads
    if [ -f "$BACKUP_DIR/uploads.tar.gz" ]; then
        tar -xzf "$BACKUP_DIR/uploads.tar.gz"
    fi
    
    # Red√©marrage des services
    docker-compose -f docker-compose.yml -f docker-compose.prod.yml restart
    
    log_success "Rollback termin√©"
}

# Tests post-d√©ploiement
post_deploy_tests() {
    log_info "Ex√©cution des tests post-d√©ploiement..."
    
    # Test API
    if curl -f http://localhost:3000/api/health; then
        log_success "‚úÖ API Health OK"
    else
        log_error "‚ùå API Health FAILED"
        return 1
    fi
    
    # Test base de donn√©es
    if docker-compose exec -T postgres pg_isready -U ${POSTGRES_USER:-djobea_user} -d ${POSTGRES_DB:-djobea}; then
        log_success "‚úÖ Database OK"
    else
        log_error "‚ùå Database FAILED"
        return 1
    fi
    
    # Test fonctionnalit√©s critiques
    if curl -f http://localhost:3000/api/dashboard &>/dev/null; then
        log_success "‚úÖ Dashboard API OK"
    else
        log_error "‚ùå Dashboard API FAILED"
        return 1
    fi
    
    log_success "Tous les tests post-d√©ploiement r√©ussis"
}

# Nettoyage
cleanup() {
    log_info "Nettoyage des ressources..."
    
    # Suppression des images Docker inutilis√©es
    docker image prune -f
    
    # Suppression des volumes inutilis√©s
    docker volume prune -f
    
    log_success "Nettoyage termin√©"
}

# Notification
send_notification() {
    local status=$1
    local message="Mise √† jour Djobea Analytics: $status (Version: $VERSION)"
    
    # Slack notification
    if [ ! -z "$SLACK_WEBHOOK_URL" ]; then
        curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$message\"}" \
            "$SLACK_WEBHOOK_URL" &>/dev/null || true
    fi
    
    # Discord notification
    if [ ! -z "$DISCORD_WEBHOOK_URL" ]; then
        curl -X POST -H 'Content-type: application/json' \
            --data "{\"content\":\"$message\"}" \
            "$DISCORD_WEBHOOK_URL" &>/dev/null || true
    fi
}

# Fonction principale
main() {
    log_info "üîÑ Mise √† jour Production - Djobea Analytics"
    log_info "Version cible: $VERSION"
    echo ""
    
    # Chargement des variables d'environnement
    if [ -f ".env.production" ]; then
        source .env.production
    fi
    
    # Confirmation
    read -p "Confirmer la mise √† jour vers $VERSION? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Mise √† jour annul√©e"
        exit 0
    fi
    
    # Ex√©cution des √©tapes
    health_check
    backup_before_update
    update_code
    update_dependencies
    migrate_database
    
    # Choix de la strat√©gie de d√©ploiement
    if [ "$BLUE_GREEN_ENABLED" = "true" ]; then
        blue_green_deploy
    else
        standard_deploy
    fi
    
    # Tests et finalisation
    if post_deploy_tests; then
        cleanup
        send_notification "SUCCESS"
        log_success "üéâ Mise √† jour termin√©e avec succ√®s!"
    else
        rollback
        send_notification "FAILED"
        log_error "‚ùå Mise √† jour √©chou√©e, rollback effectu√©"
        exit 1
    fi
}

# Gestion des erreurs
trap 'log_error "Mise √† jour interrompue"; rollback; exit 1' INT TERM

# Ex√©cution
main "$@"
